// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: proto/ext_authz.proto

package authv3

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	_ "google.golang.org/protobuf/types/known/durationpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StatusCode int32

const (
	// Empty - This code not part of the HTTP status code specification, but it is needed for proto
	// `enum` type.
	StatusCode_Empty StatusCode = 0
	// Continue - “100“ status code.
	StatusCode_Continue StatusCode = 100
	// OK - “200“ status code.
	StatusCode_OK StatusCode = 200
	// Created - “201“ status code.
	StatusCode_Created StatusCode = 201
	// Accepted - “202“ status code.
	StatusCode_Accepted StatusCode = 202
	// NonAuthoritativeInformation - “203“ status code.
	StatusCode_NonAuthoritativeInformation StatusCode = 203
	// NoContent - “204“ status code.
	StatusCode_NoContent StatusCode = 204
	// ResetContent - “205“ status code.
	StatusCode_ResetContent StatusCode = 205
	// PartialContent - “206“ status code.
	StatusCode_PartialContent StatusCode = 206
	// MultiStatus - “207“ status code.
	StatusCode_MultiStatus StatusCode = 207
	// AlreadyReported - “208“ status code.
	StatusCode_AlreadyReported StatusCode = 208
	// IMUsed - “226“ status code.
	StatusCode_IMUsed StatusCode = 226
	// MultipleChoices - “300“ status code.
	StatusCode_MultipleChoices StatusCode = 300
	// MovedPermanently - “301“ status code.
	StatusCode_MovedPermanently StatusCode = 301
	// Found - “302“ status code.
	StatusCode_Found StatusCode = 302
	// SeeOther - “303“ status code.
	StatusCode_SeeOther StatusCode = 303
	// NotModified - “304“ status code.
	StatusCode_NotModified StatusCode = 304
	// UseProxy - “305“ status code.
	StatusCode_UseProxy StatusCode = 305
	// TemporaryRedirect - “307“ status code.
	StatusCode_TemporaryRedirect StatusCode = 307
	// PermanentRedirect - “308“ status code.
	StatusCode_PermanentRedirect StatusCode = 308
	// BadRequest - “400“ status code.
	StatusCode_BadRequest StatusCode = 400
	// Unauthorized - “401“ status code.
	StatusCode_Unauthorized StatusCode = 401
	// PaymentRequired - “402“ status code.
	StatusCode_PaymentRequired StatusCode = 402
	// Forbidden - “403“ status code.
	StatusCode_Forbidden StatusCode = 403
	// NotFound - “404“ status code.
	StatusCode_NotFound StatusCode = 404
	// MethodNotAllowed - “405“ status code.
	StatusCode_MethodNotAllowed StatusCode = 405
	// NotAcceptable - “406“ status code.
	StatusCode_NotAcceptable StatusCode = 406
	// ProxyAuthenticationRequired - “407“ status code.
	StatusCode_ProxyAuthenticationRequired StatusCode = 407
	// RequestTimeout - “408“ status code.
	StatusCode_RequestTimeout StatusCode = 408
	// Conflict - “409“ status code.
	StatusCode_Conflict StatusCode = 409
	// Gone - “410“ status code.
	StatusCode_Gone StatusCode = 410
	// LengthRequired - “411“ status code.
	StatusCode_LengthRequired StatusCode = 411
	// PreconditionFailed - “412“ status code.
	StatusCode_PreconditionFailed StatusCode = 412
	// PayloadTooLarge - “413“ status code.
	StatusCode_PayloadTooLarge StatusCode = 413
	// UriTooLong - “414“ status code.
	StatusCode_UriTooLong StatusCode = 414
	// UnsupportedMediaType - “415“ status code.
	StatusCode_UnsupportedMediaType StatusCode = 415
	// RangeNotSatisfiable - “416“ status code.
	StatusCode_RangeNotSatisfiable StatusCode = 416
	// ExpectationFailed - “417“ status code.
	StatusCode_ExpectationFailed StatusCode = 417
	// MisdirectedRequest - “421“ status code.
	StatusCode_MisdirectedRequest StatusCode = 421
	// UnprocessableEntity - “422“ status code.
	StatusCode_UnprocessableEntity StatusCode = 422
	// Locked - “423“ status code.
	StatusCode_Locked StatusCode = 423
	// FailedDependency - “424“ status code.
	StatusCode_FailedDependency StatusCode = 424
	// TooEarly - “425“ status code.
	StatusCode_TooEarly StatusCode = 425
	// UpgradeRequired - “426“ status code.
	StatusCode_UpgradeRequired StatusCode = 426
	// PreconditionRequired - “428“ status code.
	StatusCode_PreconditionRequired StatusCode = 428
	// TooManyRequests - “429“ status code.
	StatusCode_TooManyRequests StatusCode = 429
	// RequestHeaderFieldsTooLarge - “431“ status code.
	StatusCode_RequestHeaderFieldsTooLarge StatusCode = 431
	// InternalServerError - “500“ status code.
	StatusCode_InternalServerError StatusCode = 500
	// NotImplemented - “501“ status code.
	StatusCode_NotImplemented StatusCode = 501
	// BadGateway - “502“ status code.
	StatusCode_BadGateway StatusCode = 502
	// ServiceUnavailable - “503“ status code.
	StatusCode_ServiceUnavailable StatusCode = 503
	// GatewayTimeout - “504“ status code.
	StatusCode_GatewayTimeout StatusCode = 504
	// HttpVersionNotSupported - “505“ status code.
	StatusCode_HttpVersionNotSupported StatusCode = 505
	// VariantAlsoNegotiates - “506“ status code.
	StatusCode_VariantAlsoNegotiates StatusCode = 506
	// InsufficientStorage - “507“ status code.
	StatusCode_InsufficientStorage StatusCode = 507
	// LoopDetected - “508“ status code.
	StatusCode_LoopDetected StatusCode = 508
	// NotExtended - “510“ status code.
	StatusCode_NotExtended StatusCode = 510
	// NetworkAuthenticationRequired - “511“ status code.
	StatusCode_NetworkAuthenticationRequired StatusCode = 511
)

// Enum value maps for StatusCode.
var (
	StatusCode_name = map[int32]string{
		0:   "Empty",
		100: "Continue",
		200: "OK",
		201: "Created",
		202: "Accepted",
		203: "NonAuthoritativeInformation",
		204: "NoContent",
		205: "ResetContent",
		206: "PartialContent",
		207: "MultiStatus",
		208: "AlreadyReported",
		226: "IMUsed",
		300: "MultipleChoices",
		301: "MovedPermanently",
		302: "Found",
		303: "SeeOther",
		304: "NotModified",
		305: "UseProxy",
		307: "TemporaryRedirect",
		308: "PermanentRedirect",
		400: "BadRequest",
		401: "Unauthorized",
		402: "PaymentRequired",
		403: "Forbidden",
		404: "NotFound",
		405: "MethodNotAllowed",
		406: "NotAcceptable",
		407: "ProxyAuthenticationRequired",
		408: "RequestTimeout",
		409: "Conflict",
		410: "Gone",
		411: "LengthRequired",
		412: "PreconditionFailed",
		413: "PayloadTooLarge",
		414: "UriTooLong",
		415: "UnsupportedMediaType",
		416: "RangeNotSatisfiable",
		417: "ExpectationFailed",
		421: "MisdirectedRequest",
		422: "UnprocessableEntity",
		423: "Locked",
		424: "FailedDependency",
		425: "TooEarly",
		426: "UpgradeRequired",
		428: "PreconditionRequired",
		429: "TooManyRequests",
		431: "RequestHeaderFieldsTooLarge",
		500: "InternalServerError",
		501: "NotImplemented",
		502: "BadGateway",
		503: "ServiceUnavailable",
		504: "GatewayTimeout",
		505: "HttpVersionNotSupported",
		506: "VariantAlsoNegotiates",
		507: "InsufficientStorage",
		508: "LoopDetected",
		510: "NotExtended",
		511: "NetworkAuthenticationRequired",
	}
	StatusCode_value = map[string]int32{
		"Empty":                         0,
		"Continue":                      100,
		"OK":                            200,
		"Created":                       201,
		"Accepted":                      202,
		"NonAuthoritativeInformation":   203,
		"NoContent":                     204,
		"ResetContent":                  205,
		"PartialContent":                206,
		"MultiStatus":                   207,
		"AlreadyReported":               208,
		"IMUsed":                        226,
		"MultipleChoices":               300,
		"MovedPermanently":              301,
		"Found":                         302,
		"SeeOther":                      303,
		"NotModified":                   304,
		"UseProxy":                      305,
		"TemporaryRedirect":             307,
		"PermanentRedirect":             308,
		"BadRequest":                    400,
		"Unauthorized":                  401,
		"PaymentRequired":               402,
		"Forbidden":                     403,
		"NotFound":                      404,
		"MethodNotAllowed":              405,
		"NotAcceptable":                 406,
		"ProxyAuthenticationRequired":   407,
		"RequestTimeout":                408,
		"Conflict":                      409,
		"Gone":                          410,
		"LengthRequired":                411,
		"PreconditionFailed":            412,
		"PayloadTooLarge":               413,
		"UriTooLong":                    414,
		"UnsupportedMediaType":          415,
		"RangeNotSatisfiable":           416,
		"ExpectationFailed":             417,
		"MisdirectedRequest":            421,
		"UnprocessableEntity":           422,
		"Locked":                        423,
		"FailedDependency":              424,
		"TooEarly":                      425,
		"UpgradeRequired":               426,
		"PreconditionRequired":          428,
		"TooManyRequests":               429,
		"RequestHeaderFieldsTooLarge":   431,
		"InternalServerError":           500,
		"NotImplemented":                501,
		"BadGateway":                    502,
		"ServiceUnavailable":            503,
		"GatewayTimeout":                504,
		"HttpVersionNotSupported":       505,
		"VariantAlsoNegotiates":         506,
		"InsufficientStorage":           507,
		"LoopDetected":                  508,
		"NotExtended":                   510,
		"NetworkAuthenticationRequired": 511,
	}
)

func (x StatusCode) Enum() *StatusCode {
	p := new(StatusCode)
	*p = x
	return p
}

func (x StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_ext_authz_proto_enumTypes[0].Descriptor()
}

func (StatusCode) Type() protoreflect.EnumType {
	return &file_proto_ext_authz_proto_enumTypes[0]
}

func (x StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatusCode.Descriptor instead.
func (StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_proto_ext_authz_proto_rawDescGZIP(), []int{0}
}

type CheckRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The request attributes.
	Attributes    *AttributeContext `protobuf:"bytes,1,opt,name=attributes,proto3" json:"attributes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckRequest) Reset() {
	*x = CheckRequest{}
	mi := &file_proto_ext_authz_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckRequest) ProtoMessage() {}

func (x *CheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ext_authz_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckRequest.ProtoReflect.Descriptor instead.
func (*CheckRequest) Descriptor() ([]byte, []int) {
	return file_proto_ext_authz_proto_rawDescGZIP(), []int{0}
}

func (x *CheckRequest) GetAttributes() *AttributeContext {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// HTTP attributes for a denied response.
type DeniedHttpResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// This field allows the authorization service to send an HTTP response status code to the
	// downstream client. If not set, Envoy sends “403 Forbidden“ HTTP status code by default.
	Status *HttpStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// This field allows the authorization service to send HTTP response headers
	// to the downstream client. Note that the :ref:`append field in HeaderValueOption <envoy_v3_api_field_config.core.v3.HeaderValueOption.append>` defaults to
	// false when used in this message.
	Headers []*HeaderValueOption `protobuf:"bytes,2,rep,name=headers,proto3" json:"headers,omitempty"`
	// This field allows the authorization service to send a response body data
	// to the downstream client.
	Body          string `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeniedHttpResponse) Reset() {
	*x = DeniedHttpResponse{}
	mi := &file_proto_ext_authz_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeniedHttpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeniedHttpResponse) ProtoMessage() {}

func (x *DeniedHttpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ext_authz_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeniedHttpResponse.ProtoReflect.Descriptor instead.
func (*DeniedHttpResponse) Descriptor() ([]byte, []int) {
	return file_proto_ext_authz_proto_rawDescGZIP(), []int{1}
}

func (x *DeniedHttpResponse) GetStatus() *HttpStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *DeniedHttpResponse) GetHeaders() []*HeaderValueOption {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *DeniedHttpResponse) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

// HTTP attributes for an OK response.
// [#next-free-field: 9]
type OkHttpResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// HTTP entity headers in addition to the original request headers. This allows the authorization
	// service to append, to add or to override headers from the original request before
	// dispatching it to the upstream. Note that the :ref:`append field in HeaderValueOption <envoy_v3_api_field_config.core.v3.HeaderValueOption.append>` defaults to
	// false when used in this message. By setting the “append“ field to “true“,
	// the filter will append the correspondent header value to the matched request header.
	// By leaving “append“ as false, the filter will either add a new header, or override an existing
	// one if there is a match.
	Headers []*HeaderValueOption `protobuf:"bytes,2,rep,name=headers,proto3" json:"headers,omitempty"`
	// HTTP entity headers to remove from the original request before dispatching
	// it to the upstream. This allows the authorization service to act on auth
	// related headers (like “Authorization“), process them, and consume them.
	// Under this model, the upstream will either receive the request (if it's
	// authorized) or not receive it (if it's not), but will not see headers
	// containing authorization credentials.
	//
	// Pseudo headers (such as “:authority“, “:method“, “:path“ etc), as well as
	// the header “Host“, may not be removed as that would make the request
	// malformed. If mentioned in “headers_to_remove“ these special headers will
	// be ignored.
	//
	// When using the HTTP service this must instead be set by the HTTP
	// authorization service as a comma separated list like so:
	// “x-envoy-auth-headers-to-remove: one-auth-header, another-auth-header“.
	HeadersToRemove []string `protobuf:"bytes,5,rep,name=headers_to_remove,json=headersToRemove,proto3" json:"headers_to_remove,omitempty"`
	// This field has been deprecated in favor of :ref:`CheckResponse.dynamic_metadata
	// <envoy_v3_api_field_service.auth.v3.CheckResponse.dynamic_metadata>`. Until it is removed,
	// setting this field overrides :ref:`CheckResponse.dynamic_metadata
	// <envoy_v3_api_field_service.auth.v3.CheckResponse.dynamic_metadata>`.
	//
	// Deprecated: Marked as deprecated in proto/ext_authz.proto.
	DynamicMetadata *structpb.Struct `protobuf:"bytes,3,opt,name=dynamic_metadata,json=dynamicMetadata,proto3" json:"dynamic_metadata,omitempty"`
	// This field allows the authorization service to send HTTP response headers
	// to the downstream client on success. Note that the :ref:`append field in HeaderValueOption <envoy_v3_api_field_config.core.v3.HeaderValueOption.append>`
	// defaults to false when used in this message.
	ResponseHeadersToAdd []*HeaderValueOption `protobuf:"bytes,6,rep,name=response_headers_to_add,json=responseHeadersToAdd,proto3" json:"response_headers_to_add,omitempty"`
	// This field allows the authorization service to set (and overwrite) query
	// string parameters on the original request before it is sent upstream.
	QueryParametersToSet []*QueryParameter `protobuf:"bytes,7,rep,name=query_parameters_to_set,json=queryParametersToSet,proto3" json:"query_parameters_to_set,omitempty"`
	// This field allows the authorization service to specify which query parameters
	// should be removed from the original request before it is sent upstream. Each
	// element in this list is a case-sensitive query parameter name to be removed.
	QueryParametersToRemove []string `protobuf:"bytes,8,rep,name=query_parameters_to_remove,json=queryParametersToRemove,proto3" json:"query_parameters_to_remove,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *OkHttpResponse) Reset() {
	*x = OkHttpResponse{}
	mi := &file_proto_ext_authz_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OkHttpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OkHttpResponse) ProtoMessage() {}

func (x *OkHttpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ext_authz_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OkHttpResponse.ProtoReflect.Descriptor instead.
func (*OkHttpResponse) Descriptor() ([]byte, []int) {
	return file_proto_ext_authz_proto_rawDescGZIP(), []int{2}
}

func (x *OkHttpResponse) GetHeaders() []*HeaderValueOption {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *OkHttpResponse) GetHeadersToRemove() []string {
	if x != nil {
		return x.HeadersToRemove
	}
	return nil
}

// Deprecated: Marked as deprecated in proto/ext_authz.proto.
func (x *OkHttpResponse) GetDynamicMetadata() *structpb.Struct {
	if x != nil {
		return x.DynamicMetadata
	}
	return nil
}

func (x *OkHttpResponse) GetResponseHeadersToAdd() []*HeaderValueOption {
	if x != nil {
		return x.ResponseHeadersToAdd
	}
	return nil
}

func (x *OkHttpResponse) GetQueryParametersToSet() []*QueryParameter {
	if x != nil {
		return x.QueryParametersToSet
	}
	return nil
}

func (x *OkHttpResponse) GetQueryParametersToRemove() []string {
	if x != nil {
		return x.QueryParametersToRemove
	}
	return nil
}

// Intended for gRPC and Network Authorization servers “only“.
type CheckResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Status “OK“ allows the request. Any other status indicates the request should be denied, and
	// for HTTP filter, if not overridden by :ref:`denied HTTP response status <envoy_v3_api_field_service.auth.v3.DeniedHttpResponse.status>`
	// Envoy sends “403 Forbidden“ HTTP status code by default.
	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// An message that contains HTTP response attributes. This message is
	// used when the authorization service needs to send custom responses to the
	// downstream client or, to modify/add request headers being dispatched to the upstream.
	//
	// Types that are valid to be assigned to HttpResponse:
	//
	//	*CheckResponse_DeniedResponse
	//	*CheckResponse_OkResponse
	HttpResponse isCheckResponse_HttpResponse `protobuf_oneof:"http_response"`
	// Optional response metadata that will be emitted as dynamic metadata to be consumed by the next
	// filter. This metadata lives in a namespace specified by the canonical name of extension filter
	// that requires it:
	//
	// - :ref:`envoy.filters.http.ext_authz <config_http_filters_ext_authz_dynamic_metadata>` for HTTP filter.
	// - :ref:`envoy.filters.network.ext_authz <config_network_filters_ext_authz_dynamic_metadata>` for network filter.
	DynamicMetadata *structpb.Struct `protobuf:"bytes,4,opt,name=dynamic_metadata,json=dynamicMetadata,proto3" json:"dynamic_metadata,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CheckResponse) Reset() {
	*x = CheckResponse{}
	mi := &file_proto_ext_authz_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckResponse) ProtoMessage() {}

func (x *CheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ext_authz_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckResponse.ProtoReflect.Descriptor instead.
func (*CheckResponse) Descriptor() ([]byte, []int) {
	return file_proto_ext_authz_proto_rawDescGZIP(), []int{3}
}

func (x *CheckResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CheckResponse) GetHttpResponse() isCheckResponse_HttpResponse {
	if x != nil {
		return x.HttpResponse
	}
	return nil
}

func (x *CheckResponse) GetDeniedResponse() *DeniedHttpResponse {
	if x != nil {
		if x, ok := x.HttpResponse.(*CheckResponse_DeniedResponse); ok {
			return x.DeniedResponse
		}
	}
	return nil
}

func (x *CheckResponse) GetOkResponse() *OkHttpResponse {
	if x != nil {
		if x, ok := x.HttpResponse.(*CheckResponse_OkResponse); ok {
			return x.OkResponse
		}
	}
	return nil
}

func (x *CheckResponse) GetDynamicMetadata() *structpb.Struct {
	if x != nil {
		return x.DynamicMetadata
	}
	return nil
}

type isCheckResponse_HttpResponse interface {
	isCheckResponse_HttpResponse()
}

type CheckResponse_DeniedResponse struct {
	// Supplies http attributes for a denied response.
	DeniedResponse *DeniedHttpResponse `protobuf:"bytes,2,opt,name=denied_response,json=deniedResponse,proto3,oneof"`
}

type CheckResponse_OkResponse struct {
	// Supplies http attributes for an ok response.
	OkResponse *OkHttpResponse `protobuf:"bytes,3,opt,name=ok_response,json=okResponse,proto3,oneof"`
}

func (*CheckResponse_DeniedResponse) isCheckResponse_HttpResponse() {}

func (*CheckResponse_OkResponse) isCheckResponse_HttpResponse() {}

type Status struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// A developer-facing error message, which should be in English. Any
	// user-facing error message should be localized and sent in the
	// [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// A list of messages that carry the error details.  There is a common set of
	// message types for APIs to use.
	Details       []*anypb.Any `protobuf:"bytes,3,rep,name=details,proto3" json:"details,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Status) Reset() {
	*x = Status{}
	mi := &file_proto_ext_authz_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ext_authz_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_proto_ext_authz_proto_rawDescGZIP(), []int{4}
}

func (x *Status) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Status) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Status) GetDetails() []*anypb.Any {
	if x != nil {
		return x.Details
	}
	return nil
}

type AttributeContext struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The source of a network activity, such as starting a TCP connection.
	// In a multi hop network activity, the source represents the sender of the
	// last hop.
	Source *AttributeContext_Peer `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	// The destination of a network activity, such as accepting a TCP connection.
	// In a multi hop network activity, the destination represents the receiver of
	// the last hop.
	Destination *AttributeContext_Peer `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
	// Represents a network request, such as an HTTP request.
	Request *AttributeContext_Request `protobuf:"bytes,4,opt,name=request,proto3" json:"request,omitempty"`
	// This is analogous to http_request.headers, however these contents will not be sent to the
	// upstream server. Context_extensions provide an extension mechanism for sending additional
	// information to the auth server without modifying the proto definition. It maps to the
	// internal opaque context in the filter chain.
	ContextExtensions map[string]string `protobuf:"bytes,10,rep,name=context_extensions,json=contextExtensions,proto3" json:"context_extensions,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// TLS session details of the underlying connection.
	// This is not populated by default and will be populated only if the ext_authz filter has
	// been specifically configured to include this information.
	// For HTTP ext_authz, that requires :ref:`include_tls_session <config_http_filters_ext_authz>`
	// to be set to true.
	// For network ext_authz, that requires :ref:`include_tls_session <config_network_filters_ext_authz>`
	// to be set to true.
	TlsSession    *TLSSession `protobuf:"bytes,12,opt,name=tls_session,json=tlsSession,proto3" json:"tls_session,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AttributeContext) Reset() {
	*x = AttributeContext{}
	mi := &file_proto_ext_authz_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttributeContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributeContext) ProtoMessage() {}

func (x *AttributeContext) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ext_authz_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributeContext.ProtoReflect.Descriptor instead.
func (*AttributeContext) Descriptor() ([]byte, []int) {
	return file_proto_ext_authz_proto_rawDescGZIP(), []int{5}
}

func (x *AttributeContext) GetSource() *AttributeContext_Peer {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *AttributeContext) GetDestination() *AttributeContext_Peer {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *AttributeContext) GetRequest() *AttributeContext_Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *AttributeContext) GetContextExtensions() map[string]string {
	if x != nil {
		return x.ContextExtensions
	}
	return nil
}

func (x *AttributeContext) GetTlsSession() *TLSSession {
	if x != nil {
		return x.TlsSession
	}
	return nil
}

type HttpStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Supplies HTTP response code.
	Code          StatusCode `protobuf:"varint,1,opt,name=code,proto3,enum=envoy.service.auth.v3.StatusCode" json:"code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HttpStatus) Reset() {
	*x = HttpStatus{}
	mi := &file_proto_ext_authz_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpStatus) ProtoMessage() {}

func (x *HttpStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ext_authz_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpStatus.ProtoReflect.Descriptor instead.
func (*HttpStatus) Descriptor() ([]byte, []int) {
	return file_proto_ext_authz_proto_rawDescGZIP(), []int{6}
}

func (x *HttpStatus) GetCode() StatusCode {
	if x != nil {
		return x.Code
	}
	return StatusCode_Empty
}

type HeaderValueOption struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Header value to add, append, or remove.
	// An empty header value is allowed.
	Header *HeaderValue `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// If set to true, the header will be appended to the existing headers.
	// If set to false, the header will be added or overwrite the existing headers.
	Append        *wrapperspb.BoolValue `protobuf:"bytes,2,opt,name=append,proto3" json:"append,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HeaderValueOption) Reset() {
	*x = HeaderValueOption{}
	mi := &file_proto_ext_authz_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeaderValueOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeaderValueOption) ProtoMessage() {}

func (x *HeaderValueOption) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ext_authz_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeaderValueOption.ProtoReflect.Descriptor instead.
func (*HeaderValueOption) Descriptor() ([]byte, []int) {
	return file_proto_ext_authz_proto_rawDescGZIP(), []int{7}
}

func (x *HeaderValueOption) GetHeader() *HeaderValue {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *HeaderValueOption) GetAppend() *wrapperspb.BoolValue {
	if x != nil {
		return x.Append
	}
	return nil
}

type HeaderValue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Header name.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Header value.
	//
	// The same :ref:`format specifier <config_access_log_format>` as used for
	// :ref:`HTTP access logging <config_access_log>` applies here, however
	// unknown header values are replaced with the empty string instead of `-`.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// Raw header value. This field is used instead of the “value“ field when
	// :ref:`encode_raw_headers <extensions.filters.http.ext_authz.v3.ExtAuthz.encode_raw_headers>`
	// is set to true.
	RawValue      []byte `protobuf:"bytes,3,opt,name=raw_value,json=rawValue,proto3" json:"raw_value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HeaderValue) Reset() {
	*x = HeaderValue{}
	mi := &file_proto_ext_authz_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeaderValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeaderValue) ProtoMessage() {}

func (x *HeaderValue) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ext_authz_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeaderValue.ProtoReflect.Descriptor instead.
func (*HeaderValue) Descriptor() ([]byte, []int) {
	return file_proto_ext_authz_proto_rawDescGZIP(), []int{8}
}

func (x *HeaderValue) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *HeaderValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *HeaderValue) GetRawValue() []byte {
	if x != nil {
		return x.RawValue
	}
	return nil
}

type QueryParameter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The key of the query parameter.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The value of the query parameter.
	Value         string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryParameter) Reset() {
	*x = QueryParameter{}
	mi := &file_proto_ext_authz_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryParameter) ProtoMessage() {}

func (x *QueryParameter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ext_authz_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryParameter.ProtoReflect.Descriptor instead.
func (*QueryParameter) Descriptor() ([]byte, []int) {
	return file_proto_ext_authz_proto_rawDescGZIP(), []int{9}
}

func (x *QueryParameter) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *QueryParameter) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Address struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Address:
	//
	//	*Address_SocketAddress
	//	*Address_Pipe
	Address       isAddress_Address `protobuf_oneof:"address"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Address) Reset() {
	*x = Address{}
	mi := &file_proto_ext_authz_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ext_authz_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_proto_ext_authz_proto_rawDescGZIP(), []int{10}
}

func (x *Address) GetAddress() isAddress_Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Address) GetSocketAddress() string {
	if x != nil {
		if x, ok := x.Address.(*Address_SocketAddress); ok {
			return x.SocketAddress
		}
	}
	return ""
}

func (x *Address) GetPipe() string {
	if x != nil {
		if x, ok := x.Address.(*Address_Pipe); ok {
			return x.Pipe
		}
	}
	return ""
}

type isAddress_Address interface {
	isAddress_Address()
}

type Address_SocketAddress struct {
	// IPv4 or IPv6 address, e.g. “192.0.0.0“ or “2001:db8::“.
	SocketAddress string `protobuf:"bytes,1,opt,name=socket_address,json=socketAddress,proto3,oneof"`
}

type Address_Pipe struct {
	// Unix domain socket path, e.g. “/tmp/my.sock“.
	Pipe string `protobuf:"bytes,2,opt,name=pipe,proto3,oneof"`
}

func (*Address_SocketAddress) isAddress_Address() {}

func (*Address_Pipe) isAddress_Address() {}

type TLSSession struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// SNI (Server Name Indication) from the TLS handshake.
	Sni           string `protobuf:"bytes,1,opt,name=sni,proto3" json:"sni,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLSSession) Reset() {
	*x = TLSSession{}
	mi := &file_proto_ext_authz_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLSSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSSession) ProtoMessage() {}

func (x *TLSSession) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ext_authz_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSSession.ProtoReflect.Descriptor instead.
func (*TLSSession) Descriptor() ([]byte, []int) {
	return file_proto_ext_authz_proto_rawDescGZIP(), []int{11}
}

func (x *TLSSession) GetSni() string {
	if x != nil {
		return x.Sni
	}
	return ""
}

// This message defines attributes for a node that handles a network request.
// The node can be either a service or an application that sends, forwards,
// or receives the request. Service peers should fill in the “service“,
// “principal“, and “labels“ as appropriate.
// [#next-free-field: 6]
type AttributeContext_Peer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The address of the peer, this is typically the IP address.
	// It can also be UDS path, or others.
	Address *Address `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// The canonical service name of the peer.
	// It should be set to :ref:`the HTTP x-envoy-downstream-service-cluster
	// <config_http_conn_man_headers_downstream-service-cluster>`
	// If a more trusted source of the service name is available through mTLS/secure naming, it
	// should be used.
	Service string `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
	// The labels associated with the peer.
	// These could be pod labels for Kubernetes or tags for VMs.
	// The source of the labels could be an X.509 certificate or other configuration.
	Labels map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// The authenticated identity of this peer.
	// For example, the identity associated with the workload such as a service account.
	// If an X.509 certificate is used to assert the identity this field should be sourced from
	// “URI Subject Alternative Names“, “DNS Subject Alternate Names“ or “Subject“ in that order.
	// The primary identity should be the principal. The principal format is issuer specific.
	//
	// Examples:
	//
	// - SPIFFE format is “spiffe://trust-domain/path“.
	// - Google account format is “https://accounts.google.com/{userid}“.
	Principal string `protobuf:"bytes,4,opt,name=principal,proto3" json:"principal,omitempty"`
	// The X.509 certificate used to authenticate the identify of this peer.
	// When present, the certificate contents are encoded in URL and PEM format.
	Certificate   string `protobuf:"bytes,5,opt,name=certificate,proto3" json:"certificate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AttributeContext_Peer) Reset() {
	*x = AttributeContext_Peer{}
	mi := &file_proto_ext_authz_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttributeContext_Peer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributeContext_Peer) ProtoMessage() {}

func (x *AttributeContext_Peer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ext_authz_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributeContext_Peer.ProtoReflect.Descriptor instead.
func (*AttributeContext_Peer) Descriptor() ([]byte, []int) {
	return file_proto_ext_authz_proto_rawDescGZIP(), []int{5, 0}
}

func (x *AttributeContext_Peer) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *AttributeContext_Peer) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *AttributeContext_Peer) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *AttributeContext_Peer) GetPrincipal() string {
	if x != nil {
		return x.Principal
	}
	return ""
}

func (x *AttributeContext_Peer) GetCertificate() string {
	if x != nil {
		return x.Certificate
	}
	return ""
}

// Represents a network request, such as an HTTP request.
type AttributeContext_Request struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The timestamp when the proxy receives the first byte of the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	// Represents an HTTP request or an HTTP-like request.
	Http          *AttributeContext_HttpRequest `protobuf:"bytes,2,opt,name=http,proto3" json:"http,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AttributeContext_Request) Reset() {
	*x = AttributeContext_Request{}
	mi := &file_proto_ext_authz_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttributeContext_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributeContext_Request) ProtoMessage() {}

func (x *AttributeContext_Request) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ext_authz_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributeContext_Request.ProtoReflect.Descriptor instead.
func (*AttributeContext_Request) Descriptor() ([]byte, []int) {
	return file_proto_ext_authz_proto_rawDescGZIP(), []int{5, 1}
}

func (x *AttributeContext_Request) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *AttributeContext_Request) GetHttp() *AttributeContext_HttpRequest {
	if x != nil {
		return x.Http
	}
	return nil
}

// This message defines attributes for an HTTP request.
// HTTP/1.x, HTTP/2, gRPC are all considered as HTTP requests.
// [#next-free-field: 14]
type AttributeContext_HttpRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique ID for a request, which can be propagated to downstream
	// systems. The ID should have low probability of collision
	// within a single day for a specific service.
	// For HTTP requests, it should be X-Request-ID or equivalent.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The HTTP request method, such as “GET“, “POST“.
	Method string `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	// The HTTP request headers. If multiple headers share the same key, they
	// must be merged according to the HTTP spec. All header keys must be
	// lower-cased, because HTTP header keys are case-insensitive.
	// Header value is encoded as UTF-8 string. Non-UTF-8 characters will be replaced by "!".
	// This field will not be set if
	// :ref:`encode_raw_headers <extensions.filters.http.ext_authz.v3.ExtAuthz.encode_raw_headers>`
	// is set to true.
	Headers map[string]string `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// The request target, as it appears in the first line of the HTTP request. This includes
	// the URL path and query-string. No decoding is performed.
	Path string `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	// The HTTP request “Host“ or “:authority“ header value.
	Host string `protobuf:"bytes,5,opt,name=host,proto3" json:"host,omitempty"`
	// The HTTP URL scheme, such as “http“ and “https“.
	Scheme string `protobuf:"bytes,6,opt,name=scheme,proto3" json:"scheme,omitempty"`
	// This field is always empty, and exists for compatibility reasons. The HTTP URL query is
	// included in “path“ field.
	Query string `protobuf:"bytes,7,opt,name=query,proto3" json:"query,omitempty"`
	// This field is always empty, and exists for compatibility reasons. The URL fragment is
	// not submitted as part of HTTP requests; it is unknowable.
	Fragment string `protobuf:"bytes,8,opt,name=fragment,proto3" json:"fragment,omitempty"`
	// The HTTP request size in bytes. If unknown, it must be -1.
	Size int64 `protobuf:"varint,9,opt,name=size,proto3" json:"size,omitempty"`
	// The HTTP request body in bytes. Note that the body is not included in the size field.
	// If unknown, it must be -1.
	Body string `protobuf:"bytes,10,opt,name=body,proto3" json:"body,omitempty"`
	// The HTTP request body in bytes. Note that the body is not included in the size field.
	// If unknown, it must be -1.
	RawBody []byte `protobuf:"bytes,11,opt,name=raw_body,json=rawBody,proto3" json:"raw_body,omitempty"`
	// The HTTP request body in bytes. Note that the body is not included in the size field.
	// If unknown, it must be -1.
	RawBodyString string `protobuf:"bytes,12,opt,name=raw_body_string,json=rawBodyString,proto3" json:"raw_body_string,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AttributeContext_HttpRequest) Reset() {
	*x = AttributeContext_HttpRequest{}
	mi := &file_proto_ext_authz_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttributeContext_HttpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributeContext_HttpRequest) ProtoMessage() {}

func (x *AttributeContext_HttpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ext_authz_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributeContext_HttpRequest.ProtoReflect.Descriptor instead.
func (*AttributeContext_HttpRequest) Descriptor() ([]byte, []int) {
	return file_proto_ext_authz_proto_rawDescGZIP(), []int{5, 2}
}

func (x *AttributeContext_HttpRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AttributeContext_HttpRequest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *AttributeContext_HttpRequest) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *AttributeContext_HttpRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *AttributeContext_HttpRequest) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *AttributeContext_HttpRequest) GetScheme() string {
	if x != nil {
		return x.Scheme
	}
	return ""
}

func (x *AttributeContext_HttpRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *AttributeContext_HttpRequest) GetFragment() string {
	if x != nil {
		return x.Fragment
	}
	return ""
}

func (x *AttributeContext_HttpRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *AttributeContext_HttpRequest) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *AttributeContext_HttpRequest) GetRawBody() []byte {
	if x != nil {
		return x.RawBody
	}
	return nil
}

func (x *AttributeContext_HttpRequest) GetRawBodyString() string {
	if x != nil {
		return x.RawBodyString
	}
	return ""
}

var File_proto_ext_authz_proto protoreflect.FileDescriptor

const file_proto_ext_authz_proto_rawDesc = "" +
	"\n" +
	"\x15proto/ext_authz.proto\x12\x15envoy.service.auth.v3\x1a\x19google/protobuf/any.proto\x1a\x1egoogle/protobuf/wrappers.proto\x1a\x1cgoogle/protobuf/struct.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"W\n" +
	"\fCheckRequest\x12G\n" +
	"\n" +
	"attributes\x18\x01 \x01(\v2'.envoy.service.auth.v3.AttributeContextR\n" +
	"attributes\"\xa7\x01\n" +
	"\x12DeniedHttpResponse\x129\n" +
	"\x06status\x18\x01 \x01(\v2!.envoy.service.auth.v3.HttpStatusR\x06status\x12B\n" +
	"\aheaders\x18\x02 \x03(\v2(.envoy.service.auth.v3.HeaderValueOptionR\aheaders\x12\x12\n" +
	"\x04body\x18\x03 \x01(\tR\x04body\"\xc4\x03\n" +
	"\x0eOkHttpResponse\x12B\n" +
	"\aheaders\x18\x02 \x03(\v2(.envoy.service.auth.v3.HeaderValueOptionR\aheaders\x12*\n" +
	"\x11headers_to_remove\x18\x05 \x03(\tR\x0fheadersToRemove\x12F\n" +
	"\x10dynamic_metadata\x18\x03 \x01(\v2\x17.google.protobuf.StructB\x02\x18\x01R\x0fdynamicMetadata\x12_\n" +
	"\x17response_headers_to_add\x18\x06 \x03(\v2(.envoy.service.auth.v3.HeaderValueOptionR\x14responseHeadersToAdd\x12\\\n" +
	"\x17query_parameters_to_set\x18\a \x03(\v2%.envoy.service.auth.v3.QueryParameterR\x14queryParametersToSet\x12;\n" +
	"\x1aquery_parameters_to_remove\x18\b \x03(\tR\x17queryParametersToRemove\"\xbb\x02\n" +
	"\rCheckResponse\x125\n" +
	"\x06status\x18\x01 \x01(\v2\x1d.envoy.service.auth.v3.StatusR\x06status\x12T\n" +
	"\x0fdenied_response\x18\x02 \x01(\v2).envoy.service.auth.v3.DeniedHttpResponseH\x00R\x0edeniedResponse\x12H\n" +
	"\vok_response\x18\x03 \x01(\v2%.envoy.service.auth.v3.OkHttpResponseH\x00R\n" +
	"okResponse\x12B\n" +
	"\x10dynamic_metadata\x18\x04 \x01(\v2\x17.google.protobuf.StructR\x0fdynamicMetadataB\x0f\n" +
	"\rhttp_response\"f\n" +
	"\x06Status\x12\x12\n" +
	"\x04code\x18\x01 \x01(\x05R\x04code\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12.\n" +
	"\adetails\x18\x03 \x03(\v2\x14.google.protobuf.AnyR\adetails\"\xc8\n" +
	"\n" +
	"\x10AttributeContext\x12D\n" +
	"\x06source\x18\x01 \x01(\v2,.envoy.service.auth.v3.AttributeContext.PeerR\x06source\x12N\n" +
	"\vdestination\x18\x02 \x01(\v2,.envoy.service.auth.v3.AttributeContext.PeerR\vdestination\x12I\n" +
	"\arequest\x18\x04 \x01(\v2/.envoy.service.auth.v3.AttributeContext.RequestR\arequest\x12m\n" +
	"\x12context_extensions\x18\n" +
	" \x03(\v2>.envoy.service.auth.v3.AttributeContext.ContextExtensionsEntryR\x11contextExtensions\x12B\n" +
	"\vtls_session\x18\f \x01(\v2!.envoy.service.auth.v3.TLSSessionR\n" +
	"tlsSession\x1a\xa7\x02\n" +
	"\x04Peer\x128\n" +
	"\aaddress\x18\x01 \x01(\v2\x1e.envoy.service.auth.v3.AddressR\aaddress\x12\x18\n" +
	"\aservice\x18\x02 \x01(\tR\aservice\x12P\n" +
	"\x06labels\x18\x03 \x03(\v28.envoy.service.auth.v3.AttributeContext.Peer.LabelsEntryR\x06labels\x12\x1c\n" +
	"\tprincipal\x18\x04 \x01(\tR\tprincipal\x12 \n" +
	"\vcertificate\x18\x05 \x01(\tR\vcertificate\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a\x82\x01\n" +
	"\aRequest\x12.\n" +
	"\x04time\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\x04time\x12G\n" +
	"\x04http\x18\x02 \x01(\v23.envoy.service.auth.v3.AttributeContext.HttpRequestR\x04http\x1a\xaa\x03\n" +
	"\vHttpRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x16\n" +
	"\x06method\x18\x02 \x01(\tR\x06method\x12Z\n" +
	"\aheaders\x18\x03 \x03(\v2@.envoy.service.auth.v3.AttributeContext.HttpRequest.HeadersEntryR\aheaders\x12\x12\n" +
	"\x04path\x18\x04 \x01(\tR\x04path\x12\x12\n" +
	"\x04host\x18\x05 \x01(\tR\x04host\x12\x16\n" +
	"\x06scheme\x18\x06 \x01(\tR\x06scheme\x12\x14\n" +
	"\x05query\x18\a \x01(\tR\x05query\x12\x1a\n" +
	"\bfragment\x18\b \x01(\tR\bfragment\x12\x12\n" +
	"\x04size\x18\t \x01(\x03R\x04size\x12\x12\n" +
	"\x04body\x18\n" +
	" \x01(\tR\x04body\x12\x19\n" +
	"\braw_body\x18\v \x01(\fR\arawBody\x12&\n" +
	"\x0fraw_body_string\x18\f \x01(\tR\rrawBodyString\x1a:\n" +
	"\fHeadersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1aD\n" +
	"\x16ContextExtensionsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"C\n" +
	"\n" +
	"HttpStatus\x125\n" +
	"\x04code\x18\x01 \x01(\x0e2!.envoy.service.auth.v3.StatusCodeR\x04code\"\x83\x01\n" +
	"\x11HeaderValueOption\x12:\n" +
	"\x06header\x18\x01 \x01(\v2\".envoy.service.auth.v3.HeaderValueR\x06header\x122\n" +
	"\x06append\x18\x02 \x01(\v2\x1a.google.protobuf.BoolValueR\x06append\"R\n" +
	"\vHeaderValue\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value\x12\x1b\n" +
	"\traw_value\x18\x03 \x01(\fR\brawValue\"8\n" +
	"\x0eQueryParameter\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value\"S\n" +
	"\aAddress\x12'\n" +
	"\x0esocket_address\x18\x01 \x01(\tH\x00R\rsocketAddress\x12\x14\n" +
	"\x04pipe\x18\x02 \x01(\tH\x00R\x04pipeB\t\n" +
	"\aaddress\"\x1e\n" +
	"\n" +
	"TLSSession\x12\x10\n" +
	"\x03sni\x18\x01 \x01(\tR\x03sni*\xc4\t\n" +
	"\n" +
	"StatusCode\x12\t\n" +
	"\x05Empty\x10\x00\x12\f\n" +
	"\bContinue\x10d\x12\a\n" +
	"\x02OK\x10\xc8\x01\x12\f\n" +
	"\aCreated\x10\xc9\x01\x12\r\n" +
	"\bAccepted\x10\xca\x01\x12 \n" +
	"\x1bNonAuthoritativeInformation\x10\xcb\x01\x12\x0e\n" +
	"\tNoContent\x10\xcc\x01\x12\x11\n" +
	"\fResetContent\x10\xcd\x01\x12\x13\n" +
	"\x0ePartialContent\x10\xce\x01\x12\x10\n" +
	"\vMultiStatus\x10\xcf\x01\x12\x14\n" +
	"\x0fAlreadyReported\x10\xd0\x01\x12\v\n" +
	"\x06IMUsed\x10\xe2\x01\x12\x14\n" +
	"\x0fMultipleChoices\x10\xac\x02\x12\x15\n" +
	"\x10MovedPermanently\x10\xad\x02\x12\n" +
	"\n" +
	"\x05Found\x10\xae\x02\x12\r\n" +
	"\bSeeOther\x10\xaf\x02\x12\x10\n" +
	"\vNotModified\x10\xb0\x02\x12\r\n" +
	"\bUseProxy\x10\xb1\x02\x12\x16\n" +
	"\x11TemporaryRedirect\x10\xb3\x02\x12\x16\n" +
	"\x11PermanentRedirect\x10\xb4\x02\x12\x0f\n" +
	"\n" +
	"BadRequest\x10\x90\x03\x12\x11\n" +
	"\fUnauthorized\x10\x91\x03\x12\x14\n" +
	"\x0fPaymentRequired\x10\x92\x03\x12\x0e\n" +
	"\tForbidden\x10\x93\x03\x12\r\n" +
	"\bNotFound\x10\x94\x03\x12\x15\n" +
	"\x10MethodNotAllowed\x10\x95\x03\x12\x12\n" +
	"\rNotAcceptable\x10\x96\x03\x12 \n" +
	"\x1bProxyAuthenticationRequired\x10\x97\x03\x12\x13\n" +
	"\x0eRequestTimeout\x10\x98\x03\x12\r\n" +
	"\bConflict\x10\x99\x03\x12\t\n" +
	"\x04Gone\x10\x9a\x03\x12\x13\n" +
	"\x0eLengthRequired\x10\x9b\x03\x12\x17\n" +
	"\x12PreconditionFailed\x10\x9c\x03\x12\x14\n" +
	"\x0fPayloadTooLarge\x10\x9d\x03\x12\x0f\n" +
	"\n" +
	"UriTooLong\x10\x9e\x03\x12\x19\n" +
	"\x14UnsupportedMediaType\x10\x9f\x03\x12\x18\n" +
	"\x13RangeNotSatisfiable\x10\xa0\x03\x12\x16\n" +
	"\x11ExpectationFailed\x10\xa1\x03\x12\x17\n" +
	"\x12MisdirectedRequest\x10\xa5\x03\x12\x18\n" +
	"\x13UnprocessableEntity\x10\xa6\x03\x12\v\n" +
	"\x06Locked\x10\xa7\x03\x12\x15\n" +
	"\x10FailedDependency\x10\xa8\x03\x12\r\n" +
	"\bTooEarly\x10\xa9\x03\x12\x14\n" +
	"\x0fUpgradeRequired\x10\xaa\x03\x12\x19\n" +
	"\x14PreconditionRequired\x10\xac\x03\x12\x14\n" +
	"\x0fTooManyRequests\x10\xad\x03\x12 \n" +
	"\x1bRequestHeaderFieldsTooLarge\x10\xaf\x03\x12\x18\n" +
	"\x13InternalServerError\x10\xf4\x03\x12\x13\n" +
	"\x0eNotImplemented\x10\xf5\x03\x12\x0f\n" +
	"\n" +
	"BadGateway\x10\xf6\x03\x12\x17\n" +
	"\x12ServiceUnavailable\x10\xf7\x03\x12\x13\n" +
	"\x0eGatewayTimeout\x10\xf8\x03\x12\x1c\n" +
	"\x17HttpVersionNotSupported\x10\xf9\x03\x12\x1a\n" +
	"\x15VariantAlsoNegotiates\x10\xfa\x03\x12\x18\n" +
	"\x13InsufficientStorage\x10\xfb\x03\x12\x11\n" +
	"\fLoopDetected\x10\xfc\x03\x12\x10\n" +
	"\vNotExtended\x10\xfe\x03\x12\"\n" +
	"\x1dNetworkAuthenticationRequired\x10\xff\x032e\n" +
	"\rAuthorization\x12T\n" +
	"\x05Check\x12#.envoy.service.auth.v3.CheckRequest\x1a$.envoy.service.auth.v3.CheckResponse\"\x00BEZCgithub.com/envoyproxy/go-control-plane/envoy/service/auth/v3;authv3b\x06proto3"

var (
	file_proto_ext_authz_proto_rawDescOnce sync.Once
	file_proto_ext_authz_proto_rawDescData []byte
)

func file_proto_ext_authz_proto_rawDescGZIP() []byte {
	file_proto_ext_authz_proto_rawDescOnce.Do(func() {
		file_proto_ext_authz_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_ext_authz_proto_rawDesc), len(file_proto_ext_authz_proto_rawDesc)))
	})
	return file_proto_ext_authz_proto_rawDescData
}

var file_proto_ext_authz_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_ext_authz_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_proto_ext_authz_proto_goTypes = []any{
	(StatusCode)(0),                      // 0: envoy.service.auth.v3.StatusCode
	(*CheckRequest)(nil),                 // 1: envoy.service.auth.v3.CheckRequest
	(*DeniedHttpResponse)(nil),           // 2: envoy.service.auth.v3.DeniedHttpResponse
	(*OkHttpResponse)(nil),               // 3: envoy.service.auth.v3.OkHttpResponse
	(*CheckResponse)(nil),                // 4: envoy.service.auth.v3.CheckResponse
	(*Status)(nil),                       // 5: envoy.service.auth.v3.Status
	(*AttributeContext)(nil),             // 6: envoy.service.auth.v3.AttributeContext
	(*HttpStatus)(nil),                   // 7: envoy.service.auth.v3.HttpStatus
	(*HeaderValueOption)(nil),            // 8: envoy.service.auth.v3.HeaderValueOption
	(*HeaderValue)(nil),                  // 9: envoy.service.auth.v3.HeaderValue
	(*QueryParameter)(nil),               // 10: envoy.service.auth.v3.QueryParameter
	(*Address)(nil),                      // 11: envoy.service.auth.v3.Address
	(*TLSSession)(nil),                   // 12: envoy.service.auth.v3.TLSSession
	(*AttributeContext_Peer)(nil),        // 13: envoy.service.auth.v3.AttributeContext.Peer
	(*AttributeContext_Request)(nil),     // 14: envoy.service.auth.v3.AttributeContext.Request
	(*AttributeContext_HttpRequest)(nil), // 15: envoy.service.auth.v3.AttributeContext.HttpRequest
	nil,                                  // 16: envoy.service.auth.v3.AttributeContext.ContextExtensionsEntry
	nil,                                  // 17: envoy.service.auth.v3.AttributeContext.Peer.LabelsEntry
	nil,                                  // 18: envoy.service.auth.v3.AttributeContext.HttpRequest.HeadersEntry
	(*structpb.Struct)(nil),              // 19: google.protobuf.Struct
	(*anypb.Any)(nil),                    // 20: google.protobuf.Any
	(*wrapperspb.BoolValue)(nil),         // 21: google.protobuf.BoolValue
	(*timestamppb.Timestamp)(nil),        // 22: google.protobuf.Timestamp
}
var file_proto_ext_authz_proto_depIdxs = []int32{
	6,  // 0: envoy.service.auth.v3.CheckRequest.attributes:type_name -> envoy.service.auth.v3.AttributeContext
	7,  // 1: envoy.service.auth.v3.DeniedHttpResponse.status:type_name -> envoy.service.auth.v3.HttpStatus
	8,  // 2: envoy.service.auth.v3.DeniedHttpResponse.headers:type_name -> envoy.service.auth.v3.HeaderValueOption
	8,  // 3: envoy.service.auth.v3.OkHttpResponse.headers:type_name -> envoy.service.auth.v3.HeaderValueOption
	19, // 4: envoy.service.auth.v3.OkHttpResponse.dynamic_metadata:type_name -> google.protobuf.Struct
	8,  // 5: envoy.service.auth.v3.OkHttpResponse.response_headers_to_add:type_name -> envoy.service.auth.v3.HeaderValueOption
	10, // 6: envoy.service.auth.v3.OkHttpResponse.query_parameters_to_set:type_name -> envoy.service.auth.v3.QueryParameter
	5,  // 7: envoy.service.auth.v3.CheckResponse.status:type_name -> envoy.service.auth.v3.Status
	2,  // 8: envoy.service.auth.v3.CheckResponse.denied_response:type_name -> envoy.service.auth.v3.DeniedHttpResponse
	3,  // 9: envoy.service.auth.v3.CheckResponse.ok_response:type_name -> envoy.service.auth.v3.OkHttpResponse
	19, // 10: envoy.service.auth.v3.CheckResponse.dynamic_metadata:type_name -> google.protobuf.Struct
	20, // 11: envoy.service.auth.v3.Status.details:type_name -> google.protobuf.Any
	13, // 12: envoy.service.auth.v3.AttributeContext.source:type_name -> envoy.service.auth.v3.AttributeContext.Peer
	13, // 13: envoy.service.auth.v3.AttributeContext.destination:type_name -> envoy.service.auth.v3.AttributeContext.Peer
	14, // 14: envoy.service.auth.v3.AttributeContext.request:type_name -> envoy.service.auth.v3.AttributeContext.Request
	16, // 15: envoy.service.auth.v3.AttributeContext.context_extensions:type_name -> envoy.service.auth.v3.AttributeContext.ContextExtensionsEntry
	12, // 16: envoy.service.auth.v3.AttributeContext.tls_session:type_name -> envoy.service.auth.v3.TLSSession
	0,  // 17: envoy.service.auth.v3.HttpStatus.code:type_name -> envoy.service.auth.v3.StatusCode
	9,  // 18: envoy.service.auth.v3.HeaderValueOption.header:type_name -> envoy.service.auth.v3.HeaderValue
	21, // 19: envoy.service.auth.v3.HeaderValueOption.append:type_name -> google.protobuf.BoolValue
	11, // 20: envoy.service.auth.v3.AttributeContext.Peer.address:type_name -> envoy.service.auth.v3.Address
	17, // 21: envoy.service.auth.v3.AttributeContext.Peer.labels:type_name -> envoy.service.auth.v3.AttributeContext.Peer.LabelsEntry
	22, // 22: envoy.service.auth.v3.AttributeContext.Request.time:type_name -> google.protobuf.Timestamp
	15, // 23: envoy.service.auth.v3.AttributeContext.Request.http:type_name -> envoy.service.auth.v3.AttributeContext.HttpRequest
	18, // 24: envoy.service.auth.v3.AttributeContext.HttpRequest.headers:type_name -> envoy.service.auth.v3.AttributeContext.HttpRequest.HeadersEntry
	1,  // 25: envoy.service.auth.v3.Authorization.Check:input_type -> envoy.service.auth.v3.CheckRequest
	4,  // 26: envoy.service.auth.v3.Authorization.Check:output_type -> envoy.service.auth.v3.CheckResponse
	26, // [26:27] is the sub-list for method output_type
	25, // [25:26] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_proto_ext_authz_proto_init() }
func file_proto_ext_authz_proto_init() {
	if File_proto_ext_authz_proto != nil {
		return
	}
	file_proto_ext_authz_proto_msgTypes[3].OneofWrappers = []any{
		(*CheckResponse_DeniedResponse)(nil),
		(*CheckResponse_OkResponse)(nil),
	}
	file_proto_ext_authz_proto_msgTypes[10].OneofWrappers = []any{
		(*Address_SocketAddress)(nil),
		(*Address_Pipe)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_ext_authz_proto_rawDesc), len(file_proto_ext_authz_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_ext_authz_proto_goTypes,
		DependencyIndexes: file_proto_ext_authz_proto_depIdxs,
		EnumInfos:         file_proto_ext_authz_proto_enumTypes,
		MessageInfos:      file_proto_ext_authz_proto_msgTypes,
	}.Build()
	File_proto_ext_authz_proto = out.File
	file_proto_ext_authz_proto_goTypes = nil
	file_proto_ext_authz_proto_depIdxs = nil
}
