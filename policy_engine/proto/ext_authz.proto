syntax = "proto3";

package envoy.service.auth.v3;

import "google/protobuf/any.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";


option go_package = "github.com/envoyproxy/go-control-plane/envoy/service/auth/v3;authv3";


// [#protodoc-title: Authorization service]

// The authorization service request messages used by external authorization :ref:`network filter
// <config_network_filters_ext_authz>` and :ref:`HTTP filter <config_http_filters_ext_authz>`.

// A generic interface for performing authorization check on incoming
// requests to a networked service.
service Authorization {
  // Performs authorization check based on the attributes associated with the
  // incoming request, and returns status `OK` or not `OK`.
  rpc Check(CheckRequest) returns (CheckResponse) {
  }
}

message CheckRequest {
  // The request attributes.
  AttributeContext attributes = 1;
}

// HTTP attributes for a denied response.
message DeniedHttpResponse {
  // This field allows the authorization service to send an HTTP response status code to the
  // downstream client. If not set, Envoy sends ``403 Forbidden`` HTTP status code by default.
  HttpStatus status = 1;

  // This field allows the authorization service to send HTTP response headers
  // to the downstream client. Note that the :ref:`append field in HeaderValueOption <envoy_v3_api_field_config.core.v3.HeaderValueOption.append>` defaults to
  // false when used in this message.
  repeated HeaderValueOption headers = 2;

  // This field allows the authorization service to send a response body data
  // to the downstream client.
  string body = 3;
}

// HTTP attributes for an OK response.
// [#next-free-field: 9]
message OkHttpResponse {
  // HTTP entity headers in addition to the original request headers. This allows the authorization
  // service to append, to add or to override headers from the original request before
  // dispatching it to the upstream. Note that the :ref:`append field in HeaderValueOption <envoy_v3_api_field_config.core.v3.HeaderValueOption.append>` defaults to
  // false when used in this message. By setting the ``append`` field to ``true``,
  // the filter will append the correspondent header value to the matched request header.
  // By leaving ``append`` as false, the filter will either add a new header, or override an existing
  // one if there is a match.
  repeated HeaderValueOption headers = 2;

  // HTTP entity headers to remove from the original request before dispatching
  // it to the upstream. This allows the authorization service to act on auth
  // related headers (like ``Authorization``), process them, and consume them.
  // Under this model, the upstream will either receive the request (if it's
  // authorized) or not receive it (if it's not), but will not see headers
  // containing authorization credentials.
  //
  // Pseudo headers (such as ``:authority``, ``:method``, ``:path`` etc), as well as
  // the header ``Host``, may not be removed as that would make the request
  // malformed. If mentioned in ``headers_to_remove`` these special headers will
  // be ignored.
  //
  // When using the HTTP service this must instead be set by the HTTP
  // authorization service as a comma separated list like so:
  // ``x-envoy-auth-headers-to-remove: one-auth-header, another-auth-header``.
  repeated string headers_to_remove = 5;

  // This field has been deprecated in favor of :ref:`CheckResponse.dynamic_metadata
  // <envoy_v3_api_field_service.auth.v3.CheckResponse.dynamic_metadata>`. Until it is removed,
  // setting this field overrides :ref:`CheckResponse.dynamic_metadata
  // <envoy_v3_api_field_service.auth.v3.CheckResponse.dynamic_metadata>`.
  google.protobuf.Struct dynamic_metadata = 3 [deprecated = true];

  // This field allows the authorization service to send HTTP response headers
  // to the downstream client on success. Note that the :ref:`append field in HeaderValueOption <envoy_v3_api_field_config.core.v3.HeaderValueOption.append>`
  // defaults to false when used in this message.
  repeated HeaderValueOption response_headers_to_add = 6;

  // This field allows the authorization service to set (and overwrite) query
  // string parameters on the original request before it is sent upstream.
  repeated QueryParameter query_parameters_to_set = 7;

  // This field allows the authorization service to specify which query parameters
  // should be removed from the original request before it is sent upstream. Each
  // element in this list is a case-sensitive query parameter name to be removed.
  repeated string query_parameters_to_remove = 8;
}

// Intended for gRPC and Network Authorization servers ``only``.
message CheckResponse {
  // Status ``OK`` allows the request. Any other status indicates the request should be denied, and
  // for HTTP filter, if not overridden by :ref:`denied HTTP response status <envoy_v3_api_field_service.auth.v3.DeniedHttpResponse.status>`
  // Envoy sends ``403 Forbidden`` HTTP status code by default.
  Status status = 1;

  // An message that contains HTTP response attributes. This message is
  // used when the authorization service needs to send custom responses to the
  // downstream client or, to modify/add request headers being dispatched to the upstream.
  oneof http_response {
    // Supplies http attributes for a denied response.
    DeniedHttpResponse denied_response = 2;

    // Supplies http attributes for an ok response.
    OkHttpResponse ok_response = 3;
  }

  // Optional response metadata that will be emitted as dynamic metadata to be consumed by the next
  // filter. This metadata lives in a namespace specified by the canonical name of extension filter
  // that requires it:
  //
  // - :ref:`envoy.filters.http.ext_authz <config_http_filters_ext_authz_dynamic_metadata>` for HTTP filter.
  // - :ref:`envoy.filters.network.ext_authz <config_network_filters_ext_authz_dynamic_metadata>` for network filter.
  google.protobuf.Struct dynamic_metadata = 4;
}

message Status {
  // The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
  int32 code = 1;

  // A developer-facing error message, which should be in English. Any
  // user-facing error message should be localized and sent in the
  // [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.
  string message = 2;

  // A list of messages that carry the error details.  There is a common set of
  // message types for APIs to use.
  repeated google.protobuf.Any details = 3;
}

message AttributeContext {
  // This message defines attributes for a node that handles a network request.
  // The node can be either a service or an application that sends, forwards,
  // or receives the request. Service peers should fill in the ``service``,
  // ``principal``, and ``labels`` as appropriate.
  // [#next-free-field: 6]
  message Peer {
    // The address of the peer, this is typically the IP address.
    // It can also be UDS path, or others.
    Address address = 1;

    // The canonical service name of the peer.
    // It should be set to :ref:`the HTTP x-envoy-downstream-service-cluster
    // <config_http_conn_man_headers_downstream-service-cluster>`
    // If a more trusted source of the service name is available through mTLS/secure naming, it
    // should be used.
    string service = 2;

    // The labels associated with the peer.
    // These could be pod labels for Kubernetes or tags for VMs.
    // The source of the labels could be an X.509 certificate or other configuration.
    map<string, string> labels = 3;

    // The authenticated identity of this peer.
    // For example, the identity associated with the workload such as a service account.
    // If an X.509 certificate is used to assert the identity this field should be sourced from
    // ``URI Subject Alternative Names``, ``DNS Subject Alternate Names`` or ``Subject`` in that order.
    // The primary identity should be the principal. The principal format is issuer specific.
    //
    // Examples:
    //
    // - SPIFFE format is ``spiffe://trust-domain/path``.
    // - Google account format is ``https://accounts.google.com/{userid}``.
    string principal = 4;

    // The X.509 certificate used to authenticate the identify of this peer.
    // When present, the certificate contents are encoded in URL and PEM format.
    string certificate = 5;
  }

  // Represents a network request, such as an HTTP request.
  message Request {
    // The timestamp when the proxy receives the first byte of the request.
    google.protobuf.Timestamp time = 1;

    // Represents an HTTP request or an HTTP-like request.
    HttpRequest http = 2;
  }

  // This message defines attributes for an HTTP request.
  // HTTP/1.x, HTTP/2, gRPC are all considered as HTTP requests.
  // [#next-free-field: 14]
  message HttpRequest {
    // The unique ID for a request, which can be propagated to downstream
    // systems. The ID should have low probability of collision
    // within a single day for a specific service.
    // For HTTP requests, it should be X-Request-ID or equivalent.
    string id = 1;

    // The HTTP request method, such as ``GET``, ``POST``.
    string method = 2;

    // The HTTP request headers. If multiple headers share the same key, they
    // must be merged according to the HTTP spec. All header keys must be
    // lower-cased, because HTTP header keys are case-insensitive.
    // Header value is encoded as UTF-8 string. Non-UTF-8 characters will be replaced by "!".
    // This field will not be set if
    // :ref:`encode_raw_headers <extensions.filters.http.ext_authz.v3.ExtAuthz.encode_raw_headers>`
    // is set to true.
    map<string, string> headers = 3;

    // A list of the raw HTTP request headers. This is used instead of
    // :ref:`headers <envoy_v3_api_field_service.auth.v3.AttributeContext.HttpRequest.headers>` when
    // :ref:`encode_raw_headers <extensions.filters.http.ext_authz.v3.ExtAuthz.encode_raw_headers>`
    // is set to true.
    //
    // Note that this is not actually a map type. ``header_map`` contains a single repeated field
    // ``headers``.
    //
    // Here, only the ``key`` and ``raw_value`` fields will be populated for each HeaderValue, and
    // that is only when
    // :ref:`encode_raw_headers <extensions.filters.http.ext_authz.v3.ExtAuthz.encode_raw_headers>`
    // is set to true.
    //
    // Also, unlike the
    // :ref:`headers <envoy_v3_api_field_service.auth.v3.AttributeContext.HttpRequest.headers>`
    // field, headers with the same key are not combined into a single comma separated header.
//    config.core.v3.HeaderMap header_map = 13;

    // The request target, as it appears in the first line of the HTTP request. This includes
    // the URL path and query-string. No decoding is performed.
    string path = 4;

    // The HTTP request ``Host`` or ``:authority`` header value.
    string host = 5;

    // The HTTP URL scheme, such as ``http`` and ``https``.
    string scheme = 6;

    // This field is always empty, and exists for compatibility reasons. The HTTP URL query is
    // included in ``path`` field.
    string query = 7;

    // This field is always empty, and exists for compatibility reasons. The URL fragment is
    // not submitted as part of HTTP requests; it is unknowable.
    string fragment = 8;

    // The HTTP request size in bytes. If unknown, it must be -1.
    int64 size = 9;

    // The HTTP request body in bytes. Note that the body is not included in the size field.
    // If unknown, it must be -1.
    string body = 10;

    // The HTTP request body in bytes. Note that the body is not included in the size field.
    // If unknown, it must be -1.
    bytes raw_body = 11;

    // The HTTP request body in bytes. Note that the body is not included in the size field.
    // If unknown, it must be -1.
    string raw_body_string = 12;
  }

  // The source of a network activity, such as starting a TCP connection.
  // In a multi hop network activity, the source represents the sender of the
  // last hop.
  Peer source = 1;

  // The destination of a network activity, such as accepting a TCP connection.
  // In a multi hop network activity, the destination represents the receiver of
  // the last hop.
  Peer destination = 2;

  // Represents a network request, such as an HTTP request.
  Request request = 4;

  // This is analogous to http_request.headers, however these contents will not be sent to the
  // upstream server. Context_extensions provide an extension mechanism for sending additional
  // information to the auth server without modifying the proto definition. It maps to the
  // internal opaque context in the filter chain.
  map<string, string> context_extensions = 10;
//
//  // Dynamic metadata associated with the request.
//  config.core.v3.Metadata metadata_context = 11;
//
//  // Metadata associated with the selected route.
//  config.core.v3.Metadata route_metadata_context = 13;

  // TLS session details of the underlying connection.
  // This is not populated by default and will be populated only if the ext_authz filter has
  // been specifically configured to include this information.
  // For HTTP ext_authz, that requires :ref:`include_tls_session <config_http_filters_ext_authz>`
  // to be set to true.
  // For network ext_authz, that requires :ref:`include_tls_session <config_network_filters_ext_authz>`
  // to be set to true.
  TLSSession tls_session = 12;
}

message HttpStatus {
  // Supplies HTTP response code.
  StatusCode code = 1;
}
enum StatusCode {
  // Empty - This code not part of the HTTP status code specification, but it is needed for proto
  // `enum` type.
  Empty = 0;

  // Continue - ``100`` status code.
  Continue = 100;

  // OK - ``200`` status code.
  OK = 200;

  // Created - ``201`` status code.
  Created = 201;

  // Accepted - ``202`` status code.
  Accepted = 202;

  // NonAuthoritativeInformation - ``203`` status code.
  NonAuthoritativeInformation = 203;

  // NoContent - ``204`` status code.
  NoContent = 204;

  // ResetContent - ``205`` status code.
  ResetContent = 205;

  // PartialContent - ``206`` status code.
  PartialContent = 206;

  // MultiStatus - ``207`` status code.
  MultiStatus = 207;

  // AlreadyReported - ``208`` status code.
  AlreadyReported = 208;

  // IMUsed - ``226`` status code.
  IMUsed = 226;

  // MultipleChoices - ``300`` status code.
  MultipleChoices = 300;

  // MovedPermanently - ``301`` status code.
  MovedPermanently = 301;

  // Found - ``302`` status code.
  Found = 302;

  // SeeOther - ``303`` status code.
  SeeOther = 303;

  // NotModified - ``304`` status code.
  NotModified = 304;

  // UseProxy - ``305`` status code.
  UseProxy = 305;

  // TemporaryRedirect - ``307`` status code.
  TemporaryRedirect = 307;

  // PermanentRedirect - ``308`` status code.
  PermanentRedirect = 308;

  // BadRequest - ``400`` status code.
  BadRequest = 400;

  // Unauthorized - ``401`` status code.
  Unauthorized = 401;

  // PaymentRequired - ``402`` status code.
  PaymentRequired = 402;

  // Forbidden - ``403`` status code.
  Forbidden = 403;

  // NotFound - ``404`` status code.
  NotFound = 404;

  // MethodNotAllowed - ``405`` status code.
  MethodNotAllowed = 405;

  // NotAcceptable - ``406`` status code.
  NotAcceptable = 406;

  // ProxyAuthenticationRequired - ``407`` status code.
  ProxyAuthenticationRequired = 407;

  // RequestTimeout - ``408`` status code.
  RequestTimeout = 408;

  // Conflict - ``409`` status code.
  Conflict = 409;

  // Gone - ``410`` status code.
  Gone = 410;

  // LengthRequired - ``411`` status code.
  LengthRequired = 411;

  // PreconditionFailed - ``412`` status code.
  PreconditionFailed = 412;

  // PayloadTooLarge - ``413`` status code.
  PayloadTooLarge = 413;

  // UriTooLong - ``414`` status code.
  UriTooLong = 414;

  // UnsupportedMediaType - ``415`` status code.
  UnsupportedMediaType = 415;

  // RangeNotSatisfiable - ``416`` status code.
  RangeNotSatisfiable = 416;

  // ExpectationFailed - ``417`` status code.
  ExpectationFailed = 417;

  // MisdirectedRequest - ``421`` status code.
  MisdirectedRequest = 421;

  // UnprocessableEntity - ``422`` status code.
  UnprocessableEntity = 422;

  // Locked - ``423`` status code.
  Locked = 423;

  // FailedDependency - ``424`` status code.
  FailedDependency = 424;

  // TooEarly - ``425`` status code.
  TooEarly = 425;

  // UpgradeRequired - ``426`` status code.
  UpgradeRequired = 426;

  // PreconditionRequired - ``428`` status code.
  PreconditionRequired = 428;

  // TooManyRequests - ``429`` status code.
  TooManyRequests = 429;

  // RequestHeaderFieldsTooLarge - ``431`` status code.
  RequestHeaderFieldsTooLarge = 431;

  // InternalServerError - ``500`` status code.
  InternalServerError = 500;

  // NotImplemented - ``501`` status code.
  NotImplemented = 501;

  // BadGateway - ``502`` status code.
  BadGateway = 502;

  // ServiceUnavailable - ``503`` status code.
  ServiceUnavailable = 503;

  // GatewayTimeout - ``504`` status code.
  GatewayTimeout = 504;

  // HttpVersionNotSupported - ``505`` status code.
  HttpVersionNotSupported = 505;

  // VariantAlsoNegotiates - ``506`` status code.
  VariantAlsoNegotiates = 506;

  // InsufficientStorage - ``507`` status code.
  InsufficientStorage = 507;

  // LoopDetected - ``508`` status code.
  LoopDetected = 508;

  // NotExtended - ``510`` status code.
  NotExtended = 510;

  // NetworkAuthenticationRequired - ``511`` status code.
  NetworkAuthenticationRequired = 511;
}

message HeaderValueOption {
  // Header value to add, append, or remove.
  // An empty header value is allowed.
  HeaderValue header = 1;

  // If set to true, the header will be appended to the existing headers.
  // If set to false, the header will be added or overwrite the existing headers.
  google.protobuf.BoolValue append = 2;
}

message HeaderValue {
  // Header name.
  string key = 1;

  // Header value.
  //
  // The same :ref:`format specifier <config_access_log_format>` as used for
  // :ref:`HTTP access logging <config_access_log>` applies here, however
  // unknown header values are replaced with the empty string instead of `-`.
  string value = 2;

  // Raw header value. This field is used instead of the ``value`` field when
  // :ref:`encode_raw_headers <extensions.filters.http.ext_authz.v3.ExtAuthz.encode_raw_headers>`
  // is set to true.
  bytes raw_value = 3;
}

message QueryParameter {
  // The key of the query parameter.
  string key = 1;

  // The value of the query parameter.
  string value = 2;
}

message Address {
  oneof address {
    // IPv4 or IPv6 address, e.g. ``192.0.0.0`` or ``2001:db8::``.
    string socket_address = 1;

    // Unix domain socket path, e.g. ``/tmp/my.sock``.
    string pipe = 2;
  }
}

message TLSSession {
  // SNI (Server Name Indication) from the TLS handshake.
  string sni = 1;
}
